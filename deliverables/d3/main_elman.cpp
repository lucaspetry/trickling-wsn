#include <iostream>
#include "elman_predictor.hpp"

#define HIDDEN_UNITS 10

using array = std::array<float, HIDDEN_UNITS>;
using matrix = std::array<std::array<float, HIDDEN_UNITS>, HIDDEN_UNITS>;

int main(int argc, char* argv[]) {
  array _wInputLayer = {0.0434692344094211, -0.117129577659041, 0.0396159597025774, 1.44792765129231, -0.0214655331757237, -0.257682569872971, 0.312040087200945, 0.202274969152268, 0.358753036725679, 0.312363791481718};
  array _biasHiddenLayer = {1.39845890356367, -1.14738080703719, -0.978684341659902, -0.556398938982827, -0.256167955575031, -0.494058549086830, -0.766866403998010, 1.19247193000941, 1.48629797510188, 1.77486591938661};
	matrix _wHiddenLayer = {
		array ({0.253999771725183, 0.101075672834986, -0.809084219693527, 0.782220635900764, 0.170575497194515, -0.725569556590469, -0.346760794170527, 0.0658329847755503, -0.129246345244002, -1.05399586766442}),
 		array ({0.574277459407944, -0.960441803842893, -0.499591100493267 ,0.0728149847129205 ,0.333031433043326, -0.913718206789956 ,0.388446641480144, -1.29863441350711, 0.429742720900576, 0.0341963000347687}),
 		array ({-0.136441628213112, -0.616930728787926, 0.518796373925507, 0.0649508995130275, -0.220662384367668, -0.101412748689985, -0.0669357068993250, -1.74315729145992, 1.09582387286218, 0.690896683228038}),
 		array ({-0.203356299128291, -1.08222405105540, 0.383493450763214, -0.709215769896507, 0.464168582131730, 1.22211998719247, -1.01547921461026, -0.428116378105721, 0.446110924585813, -0.0274242785463218}),
 		array ({-0.270875886409194, 0.0912073809328455, -0.0516328188638750, 0.586340401594220, 0.659783603562392, -0.571742800119622, 0.564592109820503, -0.209862346370726, -0.903724833440726, -0.727733639061301}),
 		array ({-0.636077335337819, 0.141465871802319, 0.455727550828328, 1.50607918519404, 0.0115325425719017, -0.917813440270750, -0.552684655987483, 0.785635231975505, 1.09345978537777, -0.171921069854833}),
 		array ({0.396720613451631, 0.315682366786138, -1.13518776016433, -0.966951305247767, -0.331591359114772, 0.961992010232814, -0.490695118342911, 0.0958153701142938, 0.299409301431213, 0.627200171116388}),
 		array ({-0.162535307562108, 0.262857779731250, -0.559910805693121, -0.672760980485711, 0.537970554690443, 0.280749666642077, -1.02023871592349, 1.75743148880799, -0.664190925566813, 0.843976009022711}),
 		array ({-0.365847633050336, -0.431532805891592, 0.402510646722316, 0.458540792261277, -0.530339217439311, 1.45361525846191, 0.431718198760993, 0.362004519481536, 0.000958824397105966, 0.263317069970026}),
  	array ({0.222456208697401, 0.0152756129760119, -1.08619954365437, -0.681371341435666, 0.421028934156947, 0.789637306528555, 0.376835494147372, 0.222842838362132, 0.542952890795765, -0.120738571581836})
  	};
  array _wOutputLayer = {-0.456964262404803, -0.374752018791705, 1.38848163442352, 0.0434575211690240, -0.819748666631087, 0.0676530397619717, -0.208610493393802, -0.870427081762528, 0.193788228839796, -0.125176595828674};
 	float _biasOutputLayer = 0.504643100580076;

 	auto predictor = new ElmanPredictor<float, HIDDEN_UNITS>(_wInputLayer, _biasHiddenLayer, _wHiddenLayer, _wOutputLayer, _biasOutputLayer);
 	std::cout << "Valor: "<< predictor->predictNext(45.4) << std::endl;

  return 0;
}